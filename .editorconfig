# Remove the line below if you want to inherit .editorconfig settings from higher directories
root = true

# C# files
[*.cs]

#### Core EditorConfig Options ####

# Indentation and spacing
indent_size = 4
indent_style = space
tab_width = 4

# New line preferences
insert_final_newline = false

#### .NET Coding Conventions ####

# Organize usings
dotnet_separate_import_directive_groups = false
dotnet_sort_system_directives_first = false
file_header_template = unset

# this. and Me. preferences
dotnet_style_qualification_for_event = false
dotnet_style_qualification_for_field = false
dotnet_style_qualification_for_method = false
dotnet_style_qualification_for_property = false

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true
dotnet_style_predefined_type_for_member_access = true

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_operators = never_if_unnecessary
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members

# Expression-level preferences
dotnet_style_coalesce_expression = true
dotnet_style_collection_initializer = true
dotnet_style_explicit_tuple_names = true
dotnet_style_null_propagation = true
dotnet_style_object_initializer = true
dotnet_style_operator_placement_when_wrapping = beginning_of_line
dotnet_style_prefer_auto_properties = true
dotnet_style_prefer_compound_assignment = true
dotnet_style_prefer_conditional_expression_over_assignment = true
dotnet_style_prefer_conditional_expression_over_return = true
dotnet_style_prefer_inferred_anonymous_type_member_names = true
dotnet_style_prefer_inferred_tuple_names = true
dotnet_style_prefer_is_null_check_over_reference_equality_method = true
dotnet_style_prefer_simplified_boolean_expressions = true
dotnet_style_prefer_simplified_interpolation = true

# Field preferences
dotnet_style_readonly_field = true

# Parameter preferences
dotnet_code_quality_unused_parameters = non_public:warning

#### C# Coding Conventions ####

# var preferences
csharp_style_var_elsewhere = true
csharp_style_var_for_built_in_types = true
csharp_style_var_when_type_is_apparent = true

# Expression-bodied members
csharp_style_expression_bodied_accessors = true
csharp_style_expression_bodied_constructors = false
csharp_style_expression_bodied_indexers = true
csharp_style_expression_bodied_lambdas = true
csharp_style_expression_bodied_local_functions = false
csharp_style_expression_bodied_methods = false
csharp_style_expression_bodied_operators = false
csharp_style_expression_bodied_properties = true

# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true
csharp_style_pattern_matching_over_is_with_cast_check = true
csharp_style_prefer_not_pattern = true
csharp_style_prefer_pattern_matching = true
csharp_style_prefer_switch_expression = true

# Null-checking preferences
csharp_style_conditional_delegate_call = true

# Modifier preferences
csharp_prefer_static_local_function = true
csharp_preferred_modifier_order = public,private,protected,internal,file,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,required,volatile,async

# Code-block preferences
csharp_prefer_braces = when_multiline: warning
csharp_prefer_simple_using_statement = true

# Expression-level preferences
csharp_prefer_simple_default_expression = true
csharp_style_deconstructed_variable_declaration = true
csharp_style_inlined_variable_declaration = true
csharp_style_prefer_index_operator = true
csharp_style_prefer_range_operator = true
csharp_style_throw_expression = true
csharp_style_unused_value_assignment_preference = discard_variable
csharp_style_unused_value_expression_statement_preference = discard_variable

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace

# New line preferences

#### C# Formatting Rules ####

# New line preferences
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = all
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = 
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true

#### Naming styles ####

# Naming rules

dotnet_naming_rule.interface_should_be_begins_with_i.severity = suggestion
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

# Symbol specifications

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers =

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers =

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers =

# Naming styles

dotnet_naming_style.pascal_case.required_prefix =
dotnet_naming_style.pascal_case.required_suffix =
dotnet_naming_style.pascal_case.word_separator =
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix =
dotnet_naming_style.begins_with_i.word_separator =
dotnet_naming_style.begins_with_i.capitalization = pascal_case

## Shamelessly stolen from the dotnet project

# CA1307: Specify StringComparison for clarity
dotnet_diagnostic.CA1307.severity = none

# SYSLIB1054 Use 'LibraryImportAttribute' instead of 'DllImportAttribute' to generate PInvoke marshalling code at compile time
dotnet_diagnostic.SYSLIB1054.severity = warning

# CA1018 Mark attributes with AttributeUsageAttribute
dotnet_diagnostic.CA1018.severity = warning

# CA1047 Do not declare protected member in sealed type
dotnet_diagnostic.CA1047.severity = warning

# CA1305 Specify IFormatProvider
dotnet_diagnostic.CA1305.severity = warning

# CA1507 Use nameof to express symbol names
dotnet_diagnostic.ca1507.severity = warning

# CA1510 Use ArgumentNullException throw helper
dotnet_diagnostic.CA1510.severity = warning

# CA1511 Use ArgumentException throw helper
dotnet_diagnostic.CA1511.severity = warning

# CA1512 Use ArgumentOutOfRangeException throw helper
dotnet_diagnostic.CA1512.severity = warning

# CA1513 Use ObjectDisposedException throw helper
dotnet_diagnostic.CA1513.severity = warning

# CA1725 Parameter names should match base declaration
dotnet_diagnostic.CA1725.severity = suggestion

# CA1802 Use literals where appropriate
dotnet_diagnostic.CA1802.severity = warning

# CA1805 Do not initialize unnecessarily
dotnet_diagnostic.CA1805.severity = warning

# CA1810 Do not initialize unnecessarily
dotnet_diagnostic.CA1810.severity = warning

# CA1821 Remove empty Finalizers
dotnet_diagnostic.CA1821.severity = warning

# CA1822 Make member static
dotnet_diagnostic.CA1822.severity = warning
dotnet_code_quality.CA1822.api_surface = private, internal

# CA1823 Avoid unused private fields
dotnet_diagnostic.CA1823.severity = warning

# CA1825 Avoid zero-length array allocations
dotnet_diagnostic.CA1825.severity = warning

# CA1826 Do not use Enumerable methods on indexable collections. Instead use the collection directly
dotnet_diagnostic.CA1826.severity = suggestion

# CA1827 Do not use Count() or LongCount() when Any() can be used
dotnet_diagnostic.CA1827.severity = warning

# CA1828 Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used
dotnet_diagnostic.CA1828.severity = warning

# CA1829 Use LengthCount property instead of Count() when available
dotnet_diagnostic.CA1829.severity = warning

# CA1830 Prefer strongly-typed Append and Insert method overloads on StringBuilder
dotnet_diagnostic.CA1830.severity = warning

# CA1831 Use AsSpan or AsMemory instead of Range-based indexers when appropriate
dotnet_diagnostic.CA1831.severity = warning

# CA1832 Use AsSpan or AsMemory instead of Range-based indexers when appropriate
dotnet_diagnostic.CA1832.severity = warning

# CA1833 Use AsSpan or AsMemory instead of Range-based indexers when appropriate
dotnet_diagnostic.CA1833.severity = warning

# CA1834 Consider using 'StringBuilder.Append(char)' when applicable
dotnet_diagnostic.CA1834.severity = warning

# CA1835 Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'
dotnet_diagnostic.CA1835.severity = warning

# CA1836 Prefer IsEmpty over Count
dotnet_diagnostic.CA1836.severity = warning

# CA1837 Use 'Environment.ProcessId'
dotnet_diagnostic.CA1837.severity = warning

# CA1838 Avoid 'StringBuilder' parameters for PInvokes
dotnet_diagnostic.CA1838.severity = warning

# CA1839 Use 'Environment.ProcessPath'
dotnet_diagnostic.CA1839.severity = warning

# CA1840 Use 'Environment.CurrentManagedThreadId'
dotnet_diagnostic.CA1840.severity = warning

# CA1841 Prefer Dictionary.Contains methods
dotnet_diagnostic.CA1841.severity = warning

# CA1842 Do not use 'WhenAll' with a single task
dotnet_diagnostic.CA1842.severity = warning

# CA1843 Do not use 'WaitAll' with a single task
dotnet_diagnostic.CA1843.severity = warning

# CA1844 Provide memory-based overrides of async methods when subclassing 'Stream'
dotnet_diagnostic.CA1844.severity = warning

# CA1845 Use span-based 'string.Concat'
dotnet_diagnostic.CA1845.severity = warning

# CA1846 Prefer AsSpan over Substring
dotnet_diagnostic.CA1846.severity = warning

# CA1847 Use string.Contains(char) instead of string.Contains(string) with single characters
dotnet_diagnostic.CA1847.severity = warning

# CA1852 Seal internal types
dotnet_diagnostic.CA1852.severity = warning

# CA1854 Prefer the IDictionary.TryGetValue(TKey, out TValue) method
dotnet_diagnostic.CA1854.severity = warning

# CA1855 Prefer 'Clear' over 'Fill'
dotnet_diagnostic.CA1855.severity = warning

# CA1856 Incorrect usage of ConstantExpected attribute
dotnet_diagnostic.CA1856.severity = error

# CA1857 A constant is expected for the parameter
dotnet_diagnostic.CA1857.severity = warning

# CA1858 Use 'StartsWith' instead of 'IndexOf'
dotnet_diagnostic.CA1858.severity = warning

# CA2007 Consider calling ConfigureAwait on the awaited task
dotnet_diagnostic.CA2007.severity = suggestion

# CA2008 Do not create tasks without passing a TaskScheduler
dotnet_diagnostic.CA2008.severity = warning

# CA2009 Do not call ToImmutableCollection on an ImmutableCollection value
dotnet_diagnostic.CA2009.severity = warning

# CA2011 Avoid infinite recursion
dotnet_diagnostic.CA2011.severity = warning

# CA2012 Use ValueTask correctly
dotnet_diagnostic.CA2012.severity = warning

# CA2013 Do not use ReferenceEquals with value types
dotnet_diagnostic.CA2013.severity = warning

# CA2014 Do not use stackalloc in loops.
dotnet_diagnostic.CA2014.severity = warning

# CA2016 Forward the 'CancellationToken' parameter to methods that take one
dotnet_diagnostic.CA2016.severity = warning

# CA2022 Avoid inexact read with `Stream.Read`
dotnet_diagnostic.CA2022.severity = warning

# CA2200 Rethrow to preserve stack details
dotnet_diagnostic.CA2200.severity = warning

# CA2201 Do not raise reserved exception types
dotnet_diagnostic.CA2201.severity = warning

# CA2208 Instantiate argument exceptions correctly
dotnet_diagnostic.CA2208.severity = warning

# CA2245 Do not assign a property to itself
dotnet_diagnostic.CA2245.severity = warning

# CA2246 Assigning symbol and its member in the same statement
dotnet_diagnostic.CA2246.severity = warning

# CA2249 Use string.Contains instead of string.IndexOf to improve readability.
dotnet_diagnostic.CA2249.severity = warning

# IDE0005 Remove unnecessary usings
dotnet_diagnostic.IDE0005.severity = warning

# IDE0020 Use pattern matching to avoid is check followed by a cast (with variable)
dotnet_diagnostic.IDE0020.severity = warning

# IDE0029 Use coalesce expression (non-nullable types)
dotnet_diagnostic.IDE0029.severity = warning

# IDE0030 Use coalesce expression (nullable types)
dotnet_diagnostic.IDE0030.severity = warning

# IDE0031 Use null propagation
dotnet_diagnostic.IDE0031.severity = warning

# IDE0035 Remove unreachable code
dotnet_diagnostic.IDE0035.severity = warning

# IDE0036 Order modifiers
dotnet_diagnostic.IDE0036.severity = warning

# IDE0038 Use pattern matching to avoid is check followed by a cast (without variable)
dotnet_diagnostic.IDE0038.severity = warning

# IDE0043 Format string contains invalid placeholder
dotnet_diagnostic.IDE0043.severity = warning

# IDE0044 Make field readonly
dotnet_diagnostic.IDE0044.severity = warning

# IDE0051 Remove unused private members
dotnet_diagnostic.IDE0051.severity = warning

# IDE0055 All formatting rules
dotnet_diagnostic.IDE0055.severity = suggestion

# IDE0059 Unnecessary assignment to a value
dotnet_diagnostic.IDE0059.severity = warning

# IDE0062 Make local function static
dotnet_diagnostic.IDE0062.severity = warning

# IDE0161 Convert to file-scoped namespace
dotnet_diagnostic.IDE0161.severity = warning

# IDE0200 Lambda expression can be removed
dotnet_diagnostic.IDE0200.severity = warning

# IDE2000 Disallow multiple blank lines
dotnet_style_allow_multiple_blank_lines_experimental = false
dotnet_diagnostic.IDE2000.severity = warning

# CA2016 Forward the 'CancellationToken' parameter to methods that take one
dotnet_diagnostic.CA2016.severity = suggestion
